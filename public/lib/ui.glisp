;; Graphics and UI
(def *sketch* "")
(def *width* 0)
(def *height* 0)
(def *size* [0 0])
(def *background* nil)
(def *guide-color* nil)
(def *transform* [1 0 0 1 0 0])

(def *fill-color* nil)
(def *stroke-color* nil)
(def *stroke-width* 1)
(def *stroke-cap* "round")
(def *stroke-join* "round")

(def *modes* (atom []))

(defn defmode [mode-name handlers]
  (swap! *modes* conj {:name (name mode-name) :handlers handlers}))

;; Atoms
(def *app-background* (atom nil))

;; Sketch
(defmacro sketch [& body]
  (let [evaluated-body (eval* body)
        start-line-num (inc (last-index-of evaluated-body :start-sketch))
        sketch-body (filter element? (drop start-line-num evaluated-body))]
    `[:g :_ ~@sketch-body]))

;; Pens and Hands
;; (defmacro begin-draw
;;   {:private true}
;;   [state]
;;   `(def ~state nil))

;; (defmacro draw
;;   {:private true}
;;   [f state input]
;;   `(do
;;      (def __ret__ (~f ~state ~input))
;;      (def ~state (if (first __ret__) __ret__ (concat (list (first ~state)) (rest __ret__))))
;;      (first __ret__)))

;; (def $pens [])
;; (def $hands [])

;; (defmacro defpen
;;   {:private true}
;;   [name params body]
;;   `(do
;;      (def ~name (fn ~params ~body))
;;      (def $pens (conj $pens '~name))))

;; (defmacro defhand
;;   {:private true}
;;   [name params body]
;;   `(do
;;      (def ~name (fn ~params ~body))
;;      (def $hands (conj $hands '~name))))
