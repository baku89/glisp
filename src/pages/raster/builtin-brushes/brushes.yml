brush:
  label: Brush
  icon: |
    <path
    d="M15,21L29,7c1.1-1.1,1.1-2.9,0-4l0,0c-1.1-1.1-2.9-1.1-4,0L11,17L15,21z"/>
    <path d="M11,17c-6,0-3.9,6.3-9,8c-0.7,0.2-0.9,1.5-0.3,1.7c8.8,3,13.3-1.6,13.2-5.7"/>
  frag: |
    vec4 blendOver(vec4 A, vec4 B) {
      float alpha = B.a + A.a * (1. - B.a);
      vec3 rgb = (B.rgb * B.a + A.rgb * A.a * (1. - B.a)) / alpha;
      return vec4(rgb, alpha);
    }

    void main() {
      vec4 tex = texture2D(inputTexture, uv);
      float mask = smoothstep(radius, 0., distance(uv, cursor));
      gl_FragColor = blendOver(tex, color * vec4(vec3(1.), mask));
    }
  params:
    color:
      type: color
    radius:
      type: slider
      default: 0.1
      max: 0.5

eraser:
  label: Eraser
  icon: |
    <line x1="8" y1="14" x2="18" y2="24"/>
    <path d="M20,2L2,20c0,0,5.44,5.44,8,8h4c3.16-3.16,16-16,16-16L20,2z"/>
    <line x1="14" y1="28" x2="21" y2="28"/>
    <line x1="24" y1="28" x2="27" y2="28"/>
  frag: |
    void main() {
      vec4 tex = texture2D(inputTexture, uv);
      float mask = smoothstep(radius, 0.0, distance(uv, cursor));
      gl_FragColor = vec4(tex.rgb, tex.a * (1.0 - mask * intensity));
    }
  params:
    intensity:
      type: slider
      default: 1
      max: 1
    radius:
      type: slider
      default: 0.1
      max: 0.5

pinch:
  label: 'Pinch'
  icon: |
    <path d="M4.7,22.5"/>
    <path d="M4.7,9.5"/>
    <path d="M27,16c0-2.8-2.3-4.6-5.6-5.4C20.6,7.3,18.8,5,16,5s-4.6,2.3-5.4,5.6C7.3,11.4,5,13.2,5,16  c0,2.8,2.3,4.6,5.6,5.4c0.8,3.4,2.5,5.6,5.4,5.6s4.6-2.3,5.4-5.6C24.7,20.6,27,18.8,27,16z"/>
    <polyline points="3,7 7,7 7,3 "/>
    <polyline points="25,3 25,7 29,7 "/>
    <polyline points="29,25 25,25 25,29 "/>
    <polyline points="7,29 7,25 3,25 "/>
  frag: |
    void main() {
      float mask = smoothstep(radius, 0.0, distance(uv, cursor));

      vec2 dir = normalize(uv - cursor) * mask * speed * deltaTime;
      vec2 uv2 = uv + dir;

      gl_FragColor = texture2D(inputTexture, uv2);
    }
  params:
    speed:
      type: 'slider'
      default: 0.25
    radius:
      type: 'slider'
      max: 0.5

directional-blur:
  label: 'Directional Blur'
  icon: |
    <path d="M16,5L9.2,15.6C5.8,20.9,9.6,28,16,28h0c6.4,0,10.2-7.1,6.8-12.4L16,5z"/>
    <path d="M16,5L9.2,15.6C5.8,20.9,9.6,28,16,28h0c6.4,0,10.2-7.1,6.8-12.4L16,5z"/>
    <path d="M16,24c-2.2,0-3.2-1.5-3.6-2.1c-0.3-0.6-1-2.3,0.1-4.1"/>
    <line x1="22.1" y1="9.9" x2="29" y2="3"/>
    <line x1="3" y1="29" x2="7" y2="25"/>
    <polyline points="3,24 3,29 8,29 "/>
    <polyline points="29,8 29,3 24,3 "/>
  frag: |
    void main() {
      vec2 step = vec2(cos(angle), sin(angle)) * width;
      vec4 tex = vec4(0.0);
      
      for (int i = -3; i <= 3; i++) {
        tex += texture2D(inputTexture, uv + step * float(i) / 3.0);
      }

      tex /= 7.0;
      
      gl_FragColor = tex;
    }
  params:
    angle:
      type: 'angle'
    width:
      type: 'slider'
      default: 0.005
      min: 0
      max: .02

polar-marble:
  label: Polar Marble
  icon: |
    <circle cx="16" cy="16" r="13"/>
    <circle cx="7" cy="14" r="0.5"/>
    <path d="M16,7c-3.3,0-6.2,1.8-7.8,4.5"/>
    <path d="M3,16c9,7,16-11,26-1"/>
    <path d="M3,17c12,15,17-3,26,0"/>
  frag: >
    #define PI 3.1415926535897


    // glsl-random: github.com/mattdesl/glsl-random

    highp float random(vec2 co) {
      highp float a = 12.9898;
      highp float b = 78.233;
      highp float c = 43758.5453;
      highp float dt = dot(co.xy, vec2(a, b));
      highp float sn = mod(dt, 3.14);
      return fract(sin(sn) * c);
    }


    // glsl-noise: https://github.com/hughsk/glsl-noise

    vec3 mod289(vec3 x) {
      return x - floor(x * (1.0 / 289.0)) * 289.0;
    }


    vec2 mod289(vec2 x) {
      return x - floor(x * (1.0 / 289.0)) * 289.0;
    }


    vec3 permute(vec3 x) {
      return mod289(((x*34.0)+1.0)*x);
    }


    float snoise(vec2 v) {
      const vec4 C = vec4(
        0.211324865405187,  // (3.0-sqrt(3.0))/6.0
        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
        -0.577350269189626,  // -1.0 + 2.0 * C.x
        0.024390243902439); // 1.0 / 41.0
      // First corner
      vec2 i  = floor(v + dot(v, C.yy) );
      vec2 x0 = v -   i + dot(i, C.xx);

      // Other corners
      vec2 i1;
      i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
      vec4 x12 = x0.xyxy + C.xxzz;
      x12.xy -= i1;

      // Permutations
      // Avoid truncation effects in permutation
      i = mod289(i); 
      vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
        + i.x + vec3(0.0, i1.x, 1.0 ));

      vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
      m = m*m ;
      m = m*m ;

      // Gradients: 41 points uniformly over a line, mapped onto a diamond.
      // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
      vec3 x = 2.0 * fract(p * C.www) - 1.0;
      vec3 h = abs(x) - 0.5;
      vec3 ox = floor(x + 0.5);
      vec3 a0 = x - ox;

      // Normalise gradients implicitly by scaling m
      // Approximation of: m *= inversesqrt( a0*a0 + h*h );
      m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

      // Compute final noise value at P
      vec3 g;
      g.x  = a0.x  * x0.x  + h.x  * x0.y;
      g.yz = a0.yz * x12.xz + h.yz * x12.yw;
      return 130.0 * dot(m, g);
    }


    float random1(float seed) {
      return random(vec2(seed * 431.34, 0.0));
    }


    vec2 random2(float seed) {
      return vec2(
        random(vec2(seed, 0.0)),
        random(vec2(seed + 123.0, 0.0))
        );
    }


    vec2 base(float angle) {
      return vec2(cos(angle), sin(angle));
    }


    float brightness(vec4 color) {
      return dot(color.rgb, vec3(0.3333333));
    }


    void main() {
      vec4 original = texture2D(inputTexture, uv);
      float mask = smoothstep(radius, 0., distance(uv, cursor));

      vec2 samplePos = random2(seed) + uv / size;
      float angle = snoise(samplePos) * 2.0 * PI + random1(seed);
      float gray = brightness(original);
      vec2 offset = base(angle) * speed * deltaTime * mask;

      gl_FragColor = texture2D(inputTexture, uv + offset);
    }
  params:
    radius:
      type: slider
      default: 0.2
      min: 0
      max: 1
    size:
      type: slider
      default: 0.6
      min: 0
      max: 1
    speed:
      type: slider
      default: 0.25
    seed:
      type: seed

twirl:
  label: Twirl
  icon: <path
    d="M20.39,15.96L29.26,20C22,32.1,10.11,30.16,4.77,23.92c-4.28-4.99-3.7-12.5,1.29-16.78  c3.99-3.42,10-2.96,13.42,1.03c2.74,3.19,2.37,8-0.83,10.74c-2.55,2.19-6.4,1.89-8.59-0.66c-1.75-2.04-1.51-5.12,0.53-6.87  c1.63-1.4,4.45-1.31,5.41,0.62c1,2-0.45,3.96-2.87,3.16"/>
  frag: |
    #define PI 3.1415926535897

    void main() {
      vec2 pos = uv - cursor;
      float mask = smoothstep(radius, 0.0, length(pos));

      float angle = atan(pos.y, pos.x) + PI / 2.0;
      vec2 dir = vec2(cos(angle), sin(angle));
      vec2 uv2 = uv + dir * mask * speed * deltaTime;

      gl_FragColor = texture2D(inputTexture, uv2);
    }
  params:
    speed:
      type: slider
      default: 0.25
      min: -1
      max: 1
    radius:
      type: slider
      max: 0.5

pixel-sort:
  label: Pixel Sort
  icon: |
    <line x1="22" y1="6" x2="6" y2="6"/>
    <line x1="21" y1="11" x2="12" y2="11"/>
    <line x1="24" y1="16" x2="6" y2="16"/>
    <line x1="27" y1="21" x2="3" y2="21"/>
    <line x1="26" y1="26" x2="12" y2="26"/>
    <path d="M24,29c4-4,4-9,0-13s-4-9,0-13"/>
  frag: |
    #define PI 3.1415926535897

    // https://ciphered.xyz/2020/04/08/pixel-sorting-on-shader-using-well-crafted-sorting-filters-glsl/
    float gscale(vec3 c) {
      return dot(c, vec3(1. / 3.));
    }

    vec2 base(float angle) {
      return vec2(cos(angle), sin(angle));
    }

    float quantize(float a, float b) {
      return floor(a / b + 0.5) * b;
    }

    void main() {
      float qAngle = quantize(angle, PI / 4.);
      vec2 dir = sign(base(qAngle));
      vec2 sheer = vec2(0);

      if (dot(abs(dir), vec2(1.)) >= 2.) {
        sheer.y = dir.y;
        dir.y = 0.;
      }

      vec2 coord = uv * resolution;

      float fp = mod(float(frame), 2.) * 2. - 1.;
      float vp = mod(floor(dot(coord, dir)), 2.) * 2. - 1.;
      float parity = fp * vp;
        
      vec2 offset = (dir + sheer) * (parity / resolution);
      vec2 uv2 = uv + offset;

      // we sort
      vec4 cur = texture2D(inputTexture, uv);
      vec4 cmp = texture2D(inputTexture, uv2);

      float gCur = gscale(cur.rgb);
      float gCmp = gscale(cmp.rgb);

      bool withinMask =
        distance(uv, cursor) < radius && distance(uv2, cursor) < radius;
      bool withinFrame = 0.<uv2.x || uv2.x<1. || 0.<uv2.y || uv2.y<1.;
      bool withinThreshold = trigger == TRIGGER_DARK
        ? gCur <= threshold && gCmp <= threshold
        : gCur >= threshold && gCmp >= threshold;
      
      if (!withinMask || !withinFrame || !withinThreshold) {
        gl_FragColor = cur;
        return;
      }
      
      // the direction of the displacement defines the order of the comparaison 
      if (parity > 0.) {
        gl_FragColor = (gCur > gCmp) ? cmp : cur;
      } else {
        gl_FragColor = (gCmp > gCur) ? cmp : cur;
      }
    }
  params:
    radius:
      type: slider
      default: 0.1
      min: 0
      max: 1
    threshold:
      type: slider
      default: 0.2
      min: 0
      max: 1
    angle:
      type: angle
      default: 0
    trigger:
      type: dropdown
      items: Dark,Light
      default: Dark

gaussian_blur:
  label: Gaussian Blur
  icon: |
    <path d="M16,5L9.2,15.6C5.8,20.9,9.6,28,16,28h0c6.4,0,10.2-7.1,6.8-12.4L16,5z"/>
    <path d="M16,5L9.2,15.6C5.8,20.9,9.6,28,16,28h0c6.4,0,10.2-7.1,6.8-12.4L16,5z"/>
    <path d="M16,24c-2.2,0-3.2-1.5-3.6-2.1c-0.3-0.6-1-2.3,0.1-4.1"/>
  frag: |
    vec4 sample(float dx, float dy) {
      return texture2D(inputTexture, uv + vec2(-dx, -dy));
    }

    void main() {
      float dx = 1. / resolution.x;
      float dy = 1. / resolution.y;

      vec4 original = sample(.0, .0);

      vec4 tex = vec4(0.0);

      tex += sample(-dx, -dy) * .0625;
      tex += sample( .0, -dy) * .125;
      tex += sample(+dx, -dy) * .0625;

      tex += sample(-dx,  .0) * .125;
      tex += original         * .25;
      tex += sample(+dx,  .0) * .125;

      tex += sample(-dx, +dy) * .0625;
      tex += sample( .0, +dy) * .125;
      tex += sample(+dx, +dy) * .0625;

      float mask = smoothstep(radius, 0., distance(uv, cursor));
     
      gl_FragColor = mix(original, tex, mask);
    }
  params:
    radius:
      type: slider
      default: 0.005
      min: 0
      max: 1

hsl_brush:
  label: HSL Brush
  icon: |
    <path d="M15.6,12.4L11,17l4,4L29,7c1.1-1.1,1.1-2.9,0-4l0,0c-1.1-1.1-2.9-1.1-4,0l-3.7,3.7"/>
    <path d="M11,17c-6,0-3.9,6.3-9,8c-0.7,0.2-0.9,1.5-0.3,1.7c8.8,3,13.3-1.6,13.2-5.7"/>
    <line x1="3" y1="3" x2="3" y2="11"/>
    <line x1="3" y1="7" x2="7" y2="7"/>
    <polyline points="17,3 17,10 21,10"/>
    <line x1="7" y1="3" x2="7" y2="11"/>
    <path d="M10,8.5c0,0.8,0.9,1.5,2,1.5s2-0.7,2-1.5S13.1,7,12,7s-2-0.7-2-1.5S10.9,4,12,4s2,0.7,2,1.5"/>
  frag: |
    // https://gist.github.com/yiwenl/745bfea7f04c456e0101
    vec3 rgb2hsl(vec3 color) {
      vec3 hsl;

      float fmin = min(min(color.r, color.g), color.b); //Min. value of RGB
      float fmax = max(max(color.r, color.g), color.b); //Max. value of RGB
      float delta = fmax - fmin; //Delta RGB value

      hsl.z = (fmax + fmin) / 2.0; // Luminance

      if (delta == 0.0) {
        hsl.x = 0.0; // Hue
        hsl.y = 0.0; // Saturation
      } else {
        if (hsl.z < 0.5)
          hsl.y = delta / (fmax + fmin); // Saturation
        else
          hsl.y = delta / (2.0 - fmax - fmin); // Saturation

        float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;
        float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;
        float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;

        if (color.r == fmax)
          hsl.x = deltaB - deltaG; // Hue
        else if (color.g == fmax)
          hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue
        else if (color.b == fmax)
          hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue

        if (hsl.x < 0.0)
          hsl.x += 1.0; // Hue
        else if (hsl.x > 1.0)
          hsl.x -= 1.0; // Hue
      }
      return hsl;
    }

    float hue2rgb(float f1, float f2, float hue) {
      if (hue < 0.0)
        hue += 1.0;
      else if (hue > 1.0)
        hue -= 1.0;
      float res;
      if ((6.0 * hue) < 1.0)
        res = f1 + (f2 - f1) * 6.0 * hue;
      else if ((2.0 * hue) < 1.0)
        res = f2;
      else if ((3.0 * hue) < 2.0)
        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
      else
        res = f1;
      return res;
    }

    // https://github.com/Jam3/glsl-hsl2rgb
    vec3 hsl2rgb(vec3 hsl) {
      vec3 rgb;

      if (hsl.y == 0.0) {
        rgb = vec3(hsl.z); // Luminance
      } else {
        float f2;
        
        if (hsl.z < 0.5)
            f2 = hsl.z * (1.0 + hsl.y);
        else
            f2 = hsl.z + hsl.y - hsl.y * hsl.z;
            
        float f1 = 2.0 * hsl.z - f2;
        
        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));
        rgb.g = hue2rgb(f1, f2, hsl.x);
        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));
      }
      return rgb;
    }

    float blendOverlay(float base, float blend) {
      return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));
    }

    void main() {
      vec4 tex = texture2D(inputTexture, uv);

      vec3 hsl = rgb2hsl(tex.rgb);
      vec3 delta = vec3(hue, sat, luma) * deltaTime;

      hsl.x += delta.x;
      hsl.y = blendOverlay(hsl.y, delta.y / 2. + .5);
      hsl.z = blendOverlay(hsl.z, delta.z / 2. + .5);

      vec3 rgb = hsl2rgb(hsl);
      float mask = smoothstep(radius, 0., distance(uv, cursor));

      gl_FragColor = vec4(mix(tex.rgb, rgb, mask), tex.a);
    }
  params:
    radius:
      type: slider
      default: 0.1
      max: 0.5
    hue:
      type: slider
      default: 0.1
      min: -1
      max: 1
    sat:
      type: slider
      default: 0
      min: -1
      max: 1
    luma:
      type: slider
      default: 0
      min: -1
      max: 1

smudge:
  label: Smudge
  icon: |
    <path
    d="M17,21c0,2.6,4,2,4,2c3,0,7-4,7-6s0-13.5,0-13.5H12c0,0-5,2.5-5,7.5c0,3,1,8,4,9"/>
    <path d="M15,14c0,0-4,6-9,10c-3.3,2.7-2,5,1,5c4,0,9-7,14-13"/>
    <path d="M8,16c0.5-1.5,1.6-3.5,2-4"/>
  frag: |
    float fit(float t, float smin, float smax, float dmin, float dmax) {
      float s = (t - smin) / (smax - smin);
      s = clamp(s, 0., 1.);
      return mix(dmin, dmax, s);
    }

    void main() {
      float d = fit(distance(uv, cursor), 0., radius, 1., 0.);
      float mask = texture2D(profile, vec2(d, 0)).r;

      vec2 cursorOffset = prevCursor - cursor;

      vec2 dir = cursorOffset * mask * intensity;
      vec2 uv2 = uv + dir;

      gl_FragColor = texture2D(inputTexture, uv2);
    }
  params:
    intensity:
      type: slider
      default: 0.5
    radius:
      type: slider
      default: 0.1
      max: 0.5
    profile:
      type: cubicBezier
      default:
        - 0.9
        - 0
        - 0.9
        - 1

tone_curve:
  label: Tone Curve
  icon: |-
    <rect x="4" y="4" width="24" height="24"/>
    <line x1="11" y1="23" x2="11" y2="27"/>
    <line x1="16" y1="16" x2="16" y2="27"/>
    <line x1="16" y1="16" x2="27" y2="16"/>
    <line x1="20" y1="10" x2="27" y2="10"/>
    <line x1="12" y1="22" x2="27" y2="22"/>
    <line x1="22" y1="8" x2="22" y2="27"/>
    <path d="M5,26C16,26,16,6,27,6"/>
  frag: |
    float fit(float t, float smin, float smax, float dmin, float dmax) {
      float s = (t - smin) / (smax - smin);
      s = clamp(s, 0., 1.);
      return mix(dmin, dmax, s);
    }

    float cubicBezier(sampler2D curve, float t) {
      return texture2D(curve, vec2(t, 0)).r;
    }

    void main() {
      float mask = smoothstep(radius, 0., distance(uv, cursor));

      vec4 color = texture2D(inputTexture, uv);

      vec4 toned = vec4(
        cubicBezier(curve, color.r),
        cubicBezier(curve, color.g),
        cubicBezier(curve, color.b),
        color.a
      );

      float t = deltaTime * intensity * mask;

      gl_FragColor = mix(color, toned, t);
    }
  params:
    intensity:
      type: slider
      default: 1
      min: 0
      max: 2
    radius:
      type: slider
      default: 0.1
      max: 0.5
    curve:
      type: cubicBezier

diffuse:
  label: Diffuse
  icon: |
    <path d="M19,3h-3C8.8,3,3,8.8,3,16s5.8,13,13,13h3"/>
    <rect x="17" y="9" width="1" height="1"/>
    <rect x="14" y="19" width="1" height="1"/>
    <rect x="20" y="25" width="1" height="1"/>
    <rect x="17" y="22" width="1" height="1"/>
    <rect x="20" y="12" width="1" height="1"/>
    <rect x="23" y="9" width="1" height="1"/>
    <rect x="25" y="22" width="1" height="1"/>
    <rect x="17" y="15" width="1" height="1"/>
    <rect x="20" y="6" width="1" height="1"/>
    <rect x="20" y="18" width="1" height="1"/>
    <rect x="26" y="14" width="1" height="1"/>
  frag: |
    highp float random(vec2 co) {
        highp float a = 12.9898;
        highp float b = 78.233;
        highp float c = 43758.5453;
        highp float dt= dot(co.xy ,vec2(a,b));
        highp float sn= mod(dt,3.14);
        return fract(sin(sn) * c);
    }

    highp vec2 random2D(vec2 co) {
      return vec2(random(co), random(co + vec2(101.3323, 34.24)));
    }

    void main() {
      vec4 tex = texture2D(inputTexture, uv);
      float mask = smoothstep(radius, 0., distance(uv, cursor));

      vec2 rndOffset = random2D(vec2(seed, seed + 1.234));

      vec2 rnd = random2D(uv + rndOffset);
      vec2 offset = mix(vec2(-1), vec2(1), rnd) * intensity;

      vec4 src = texture2D(inputTexture, uv);
      vec4 dst = texture2D(inputTexture, uv + offset * mask * radius);

      gl_FragColor = mix(src, dst, deltaTime);
    }
  params:
    intensity:
      type: slider
      default: 0
      min: 0
      max: 1
      clampMin: true
      clampMax: false
    radius:
      type: slider
      default: 0.1
      max: 0.5
      min: 0
      clampMin: true
      clampMax: false
    seed:
      type: seed
