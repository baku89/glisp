brush:
  label: Brush
  icon: |
    <path
    d="M15,21L29,7c1.1-1.1,1.1-2.9,0-4l0,0c-1.1-1.1-2.9-1.1-4,0L11,17L15,21z"/>
    <path d="M11,17c-6,0-3.9,6.3-9,8c-0.7,0.2-0.9,1.5-0.3,1.7c8.8,3,13.3-1.6,13.2-5.7"/>
  frag: |
    vec4 blendOver(vec4 A, vec4 B) {
      float alpha = B.a + A.a * (1. - B.a);
      vec3 rgb = (B.rgb * B.a + A.rgb * A.a * (1. - B.a)) / alpha;
      return vec4(rgb, alpha);
    }

    void main() {
      vec4 tex = texture2D(inputTexture, uv);
      float t = smoothstep(radius, 0., distance(uv, cursor));
      gl_FragColor = blendOver(tex, color * vec4(vec3(1.), t));
    }
  params:
    color:
      type: color
    radius:
      type: slider
      default: 0.1
      max: 0.5

eraser:
  label: Eraser
  icon: |
    <line x1="8" y1="14" x2="18" y2="24"/>
    <path d="M20,2L2,20c0,0,5.44,5.44,8,8h4c3.16-3.16,16-16,16-16L20,2z"/>
    <line x1="14" y1="28" x2="21" y2="28"/>
    <line x1="24" y1="28" x2="27" y2="28"/>
  frag: |
    void main() {
      vec4 tex = texture2D(inputTexture, uv);
      float t = smoothstep(radius, 0.0, distance(uv, cursor));
      gl_FragColor = vec4(tex.rgb, tex.a * (1.0 - t * intensity));
    }
  params:
    intensity:
      type: slider
      default: 1
      max: 1
    radius:
      type: slider
      default: 0.1
      max: 0.5

pinch:
  label: 'Pinch'
  icon: |
    <path d="M4.7,22.5"/>
    <path d="M4.7,9.5"/>
    <path d="M27,16c0-2.8-2.3-4.6-5.6-5.4C20.6,7.3,18.8,5,16,5s-4.6,2.3-5.4,5.6C7.3,11.4,5,13.2,5,16  c0,2.8,2.3,4.6,5.6,5.4c0.8,3.4,2.5,5.6,5.4,5.6s4.6-2.3,5.4-5.6C24.7,20.6,27,18.8,27,16z"/>
    <polyline points="3,7 7,7 7,3 "/>
    <polyline points="25,3 25,7 29,7 "/>
    <polyline points="29,25 25,25 25,29 "/>
    <polyline points="7,29 7,25 3,25 "/>
  frag: |
    void main() {
      float t = smoothstep(radius, 0.0, distance(uv, cursor));

      vec2 dir = normalize(uv - cursor) * t * speed;
      vec2 newUv = uv + dir;

      gl_FragColor = texture2D(inputTexture, newUv);
    }
  params:
    speed:
      type: 'slider'
      min: -0.05
      max: 0.05
      default: 0.01
    radius:
      type: 'slider'
      max: 0.5

directional-blur:
  label: 'Directional Blur'
  icon: |
    <path d="M16,5L9.2,15.6C5.8,20.9,9.6,28,16,28h0c6.4,0,10.2-7.1,6.8-12.4L16,5z"/>
    <path d="M16,5L9.2,15.6C5.8,20.9,9.6,28,16,28h0c6.4,0,10.2-7.1,6.8-12.4L16,5z"/>
    <path d="M16,24c-2.2,0-3.2-1.5-3.6-2.1c-0.3-0.6-1-2.3,0.1-4.1"/>
    <line x1="22.1" y1="9.9" x2="29" y2="3"/>
    <line x1="3" y1="29" x2="7" y2="25"/>
    <polyline points="3,24 3,29 8,29 "/>
    <polyline points="29,8 29,3 24,3 "/>
  frag: |
    void main() {
      vec2 step = vec2(cos(angle), -sin(angle)) * width;
      vec4 tex = vec4(0.0);
      
      for (int i = -3; i <= 3; i++) {
        tex += texture2D(inputTexture, uv + step * float(i) / 3.0);
      }

      tex /= 7.0;
      
      gl_FragColor = tex;
    }
  params:
    angle:
      type: 'angle'
    width:
      type: 'slider'
      default: 0.005
      min: 0
      max: .02

polar-marble:
  label: Polar Marble
  icon: |
    <circle cx="16" cy="16" r="13"/>
    <circle cx="7" cy="14" r="0.5"/>
    <path d="M16,7c-3.3,0-6.2,1.8-7.8,4.5"/>
    <path d="M3,16c9,7,16-11,26-1"/>
    <path d="M3,17c12,15,17-3,26,0"/>
  frag: |
    #define PI 3.1415926535897

    highp float random(vec2 co) {
      highp float a = 12.9898;
      highp float b = 78.233;
      highp float c = 43758.5453;
      highp float dt = dot(co.xy, vec2(a, b));
      highp float sn = mod(dt, 3.14);
      return fract(sin(sn) * c);
    }

    vec3 mod289(vec3 x) {
      return x - floor(x * (1.0 / 289.0)) * 289.0;
    }

    vec2 mod289(vec2 x) {
      return x - floor(x * (1.0 / 289.0)) * 289.0;
    }

    vec3 permute(vec3 x) {
      return mod289(((x*34.0)+1.0)*x);
    }

    float snoise(vec2 v) {
      const vec4 C = vec4(
        0.211324865405187,  // (3.0-sqrt(3.0))/6.0
        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
        -0.577350269189626,  // -1.0 + 2.0 * C.x
        0.024390243902439); // 1.0 / 41.0
      // First corner
      vec2 i  = floor(v + dot(v, C.yy) );
      vec2 x0 = v -   i + dot(i, C.xx);

      // Other corners
      vec2 i1;
      i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
      vec4 x12 = x0.xyxy + C.xxzz;
      x12.xy -= i1;

      // Permutations
      // Avoid truncation effects in permutation
      i = mod289(i); 
      vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
        + i.x + vec3(0.0, i1.x, 1.0 ));

      vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
      m = m*m ;
      m = m*m ;

      // Gradients: 41 points uniformly over a line, mapped onto a diamond.
      // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

      vec3 x = 2.0 * fract(p * C.www) - 1.0;
      vec3 h = abs(x) - 0.5;
      vec3 ox = floor(x + 0.5);
      vec3 a0 = x - ox;

      // Normalise gradients implicitly by scaling m
      // Approximation of: m *= inversesqrt( a0*a0 + h*h );
      m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

      // Compute final noise value at P
      vec3 g;
      g.x  = a0.x  * x0.x  + h.x  * x0.y;
      g.yz = a0.yz * x12.xz + h.yz * x12.yw;
      return 130.0 * dot(m, g);
    }


    float random1(float seed) {
      return random(vec2(seed * 431.34, 0.0));
    }


    vec2 random2(float seed) {
      return vec2(
        random(vec2(seed, 0.0)),
        random(vec2(seed + 123.0, 0.0))
        );
    }


    vec2 base(float angle) {
      return vec2(cos(angle), sin(angle));
    }


    float brightness(vec4 color) {
      return dot(color.rgb, vec3(0.3333333));
    }


    void main() {
      vec4 oc = texture2D(inputTexture, uv);

      vec2 perlinSeed = random2(seed) + uv / size;
      float angle = snoise(perlinSeed) * 2.0 * PI + random1(seed);

      float bri = brightness(oc);
      float amp = mix(0.5, 1.9, bri);

      vec2 offset = base(angle) * speed;

      gl_FragColor = texture2D(inputTexture, uv + offset);
    }
  params:
    size:
      type: slider
      default: 1
      min: 0
      max: 1
    speed:
      type: slider
      default: 0.01
      min: 0
      max: 0.05
    seed:
      type: seed

twirl:
  label: Twirl
  icon: <path
    d="M20.39,15.96L29.26,20C22,32.1,10.11,30.16,4.77,23.92c-4.28-4.99-3.7-12.5,1.29-16.78  c3.99-3.42,10-2.96,13.42,1.03c2.74,3.19,2.37,8-0.83,10.74c-2.55,2.19-6.4,1.89-8.59-0.66c-1.75-2.04-1.51-5.12,0.53-6.87  c1.63-1.4,4.45-1.31,5.41,0.62c1,2-0.45,3.96-2.87,3.16"/>
  frag: |
    #define PI 3.1415926535897

    void main() {
      vec2 pos = uv - cursor;
      float mask = smoothstep(radius, 0.0, length(pos));

      float angle = atan(pos.y, pos.x) + PI / 2.0;
      vec2 dir = vec2(cos(angle), sin(angle));
      vec2 uv2 = uv + dir * mask * speed;

      gl_FragColor = texture2D(inputTexture, uv2);
    }
  params:
    speed:
      type: slider
      min: -0.05
      max: 0.05
      default: 0.01
    radius:
      type: slider
      max: 0.5
